{"version":3,"sources":["CookieReader.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CookieReader","state","data","componentDidMount","_this","props","saveCookie","loadCookie","then","e","console","log","render","react_default","a","createElement","Component","App","className","src","logo","alt","CookieReader_CookieReader","Boolean","window","location","hostname","match","storage","CrossStorageClient","require","_callee","key","getKey","value","regenerator_default","wrap","_context","prev","next","get","onConnect","catch","abrupt","stop","ReactDOM","src_App_0","set","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6RAEqBA,6MAEjBC,MAAQ,CACJC,KAAM,qBAGVC,kBAAoB,WAChBC,EAAKC,MAAMC,WAAW,OAAQ,eAC9BF,EAAKC,MAAME,WAAW,QAAQC,KAAK,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,QAGxDG,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,0CAb8BC,aCmB3BC,oNAZXL,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cACdL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCR,EAAAC,EAAAC,cAACO,EAAD,CAAchB,WAAYF,EAAKC,MAAMC,WAAYC,WAAYH,EAAKC,MAAME,6CAP1ES,cCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IACIC,EAAU,IAAIC,EADOC,EAAQ,IAAiBD,oBACb,iFAOrC,SAAAE,EAA0BC,GAA1B,IAAAC,EAAAC,EAAA,OAAAC,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACQN,EAAS,WAAc,OAAOL,EAAQY,IAAIR,IADlDK,EAAAE,KAAA,EAGUX,EAAQa,YAAYjC,KAAKyB,GAC1BzB,KAAK,SAAAC,GAAC,OAAEyB,EAAMzB,IACdiC,MAAM,SAAAjC,GAAM,MAAMA,IAL3B,cAAA4B,EAAAM,OAAA,SAMWT,GANX,wBAAAG,EAAAO,SAAAb,6BAUAc,IAASjC,OAAOC,EAAAC,EAAAC,cAAC+B,EAAD,CAAKxC,WAfJ,SAAC0B,EAAKE,GAEnBN,EAAQa,YAAYjC,KADP,WAAc,OAAOoB,EAAQmB,IAAIf,EAAKE,KAClBQ,MAAM,SAAAjC,GAAM,MAAMA,KAaVF,yDAA4ByC,SAASC,eAAe,SDyG3F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.33aef004.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class CookieReader extends Component {\r\n\r\n    state = {\r\n        data: \"Data transfered\"\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.props.saveCookie('test', 'Hello world');\r\n        this.props.loadCookie('test').then(e => console.log(e))\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n}","import React, {Component} from 'react';\nimport logo from './logo.svg';\n\nimport CookieReader from './CookieReader'\n\nimport './App.css';\n\nclass App extends Component {\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <CookieReader saveCookie={this.props.saveCookie} loadCookie={this.props.loadCookie}/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar CrossStorageClient = require('cross-storage').CrossStorageClient;\nvar storage = new CrossStorageClient('http://192.168.1.128:3001/hub.html');\n\nvar saveCookie = (key, value) => {\n    var setKey = function () { return storage.set(key, value); };\n    storage.onConnect().then(setKey).catch(e => {throw e});\n}\n\nasync function loadCookie(key) {\n    var getKey = function () { return storage.get(key); };\n    var value;\n    await storage.onConnect().then(getKey)\n        .then(e=>value=e)\n        .catch(e => {throw e});\n    return value;\n}\n\n\nReactDOM.render(<App saveCookie={saveCookie} loadCookie={loadCookie} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}